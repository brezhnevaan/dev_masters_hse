import re
import asyncio
import json
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from config import BOT_TOKEN
from api_requests import get_city_temperature, get_product_nutrition, get_exercise_data
from utils import get_water_norm, get_calories_norm, translate_to_english, get_progress_visualisation
from pathlib import Path


USER_DATA_FILE = str(Path("/app") / "user_data.json")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

class User:
    def __init__(self, user_id: int):
        self.user_id: int = user_id
        self.data: UserData = UserData()
        self.daily: DailyData = DailyData()

    def to_dict(self):
        return {
            "user_id": self.user_id,
            "data": self.data.to_dict(),
            "daily": self.daily.to_dict()
        }

    @staticmethod
    def from_dict(data):
        user = User(user_id=data["user_id"])
        user.data = UserData.from_dict(data["data"])
        user.daily = DailyData.from_dict(data["daily"])
        return user


class UserData:
    def __init__(self, weight=None, height=None, age=None, activity=None, city=None):
        self.weight = weight
        self.height = height
        self.age = age
        self.activity = activity
        self.city = city

    def to_dict(self):
        return self.__dict__

    @staticmethod
    def from_dict(data):
        return UserData(**data)


class DailyData:
    def __init__(self, water_goal=None, calorie_goal=None, logged_water=0, logged_calories=0, burned_calories=0, workout_minutes=0, date=None):
        self.water_goal = water_goal
        self.calorie_goal = calorie_goal
        self.logged_water = logged_water
        self.logged_calories = logged_calories
        self.burned_calories = burned_calories
        self.workout_minutes = workout_minutes
        self.date = date

    def to_dict(self):
        return self.__dict__

    @staticmethod
    def from_dict(data):
        return DailyData(**data)


class UserProfile(StatesGroup):
    confirm_update = State()
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()


class UserFood(StatesGroup):
    product_name = State()
    calories_100g = State()
    logged_amount_g = State()
    logged_calories = State()


if not Path(USER_DATA_FILE).exists():
    with open(USER_DATA_FILE, "w") as f:
        json.dump({}, f)


with open(USER_DATA_FILE, "r") as f:
    users = {int(k): User.from_dict(v) for k, v in json.load(f).items()}


def save_users():
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({k: v.to_dict() for k, v in users.items()}, f, indent=4, ensure_ascii=False)

class LoggingMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Message, data: dict):
        print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {event.text}")
        return await handler(event, data)

dp.message.middleware(LoggingMiddleware())

@router.message(Command("help"))
async def cmd_help(message: Message):
    print("Help command received")
    await message.reply(
        "üõ∏¬†–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
        "\n/start¬†‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å¬†–±–æ—Ç–æ–º"
        "\n/set_profile¬†‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
        "\n/log_water [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]¬†‚Äî –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É"
        "\n/log_food [–ø—Ä–æ–¥—É–∫—Ç]¬†‚Äî –∑–∞–ø–∏—Å–∞—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏"
        "\n/log_workout [—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞]¬†[–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤¬†—á–∞—Å–∞—Ö/–º–∏–Ω—É—Ç–∞—Ö]‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
        "\n/check_progress¬†‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"
        "\n/help¬†‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )


@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏¬†—Ä–∞—Ü–∏–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è¬†üëã"
                        "\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile.")


@router.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    current_date = message.date.date()
    if user_id in users:
        user = users[user_id]

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å ‚Äî –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≥–æ –∂–µ –¥–Ω—è
        # –ï—Å–ª–∏ –≤ –Ω–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        if user.daily.date == current_date.isoformat():
            water_goal = user.daily.water_goal
            calorie_goal = user.daily.calorie_goal
        else:
            temperature = get_city_temperature(translate_to_english(user.data.city))
            if temperature is None:
                temperature = 10.0
            user.daily.water_goal = get_water_norm(user.data.weight, user.data.activity, temperature)
            user.daily.calorie_goal = get_calories_norm(user.data.weight, user.data.height, user.data.age, user.data.activity)
            user.daily.logged_water = 0
            user.daily.logged_calories = 0
            user.daily.burned_calories = 0
            user.daily.workout_minutes = 0
            user.daily.date = current_date.isoformat()

            save_users()

            water_goal = user.daily.water_goal
            calorie_goal = user.daily.calorie_goal

        await message.reply(
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç¬†üôå\n"
            f"\n–í–µ—Å: {user.data.weight}¬†–∫–≥"
            f"\n–†–æ—Å—Ç: {user.data.height}¬†—Å–º"
            f"\n–í–æ–∑—Ä–∞—Å—Ç: {user.data.age}¬†–ª–µ—Ç"
            f"\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.data.activity}¬†–º–∏–Ω—É—Ç"
            f"\n–ì–æ—Ä–æ–¥: {user.data.city}\n"
            f"\n–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {int(water_goal)}¬†–º–ª"
            f"\n–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {int(calorie_goal)}¬†–∫–∫–∞–ª"
        )

        kb = [
            [KeyboardButton(text="–î–∞"),
             KeyboardButton(text="–ù–µ—Ç")]
        ]
        keyboard = ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True
        )
        await message.answer("–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?", reply_markup=keyboard)
        await state.set_state(UserProfile.confirm_update)
    else:
        users[user_id] = User(user_id)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥:")
        await state.set_state(UserProfile.weight)


@router.message(UserProfile.confirm_update)
async def confirm_update(message: Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤¬†–∫–≥:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(UserProfile.weight)
    elif message.text.lower() == "–Ω–µ—Ç":
        await message.reply("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ¬†–∏–∑–º–µ–Ω—ë–Ω¬†üëå", reply_markup=ReplyKeyboardRemove())
        await state.clear()
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏¬†'–ù–µ—Ç'.")


@router.message(UserProfile.weight)
async def update_weight(message: Message, state: FSMContext):
    try:
        weight = int(message.text)
        if weight <= 0:
            await message.reply("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ¬†0.")
            return
        await state.update_data(weight=weight)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤¬†—Å–º:")
        await state.set_state(UserProfile.height)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è¬†–≤–≤–æ–¥–∞ –≤–µ—Å–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return


@router.message(UserProfile.height)
async def update_height(message: Message, state: FSMContext):
    try:
        height = int(message.text)
        if height <= 0:
            await message.reply("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ¬†0.")
            return
        await state.update_data(height=height)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(UserProfile.age)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è¬†–≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return


@router.message(UserProfile.age)
async def update_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if age <= 0:
            await message.reply("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ¬†0.")
            return
        await state.update_data(age=age)
        await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É¬†–≤–∞—Å –≤¬†–¥–µ–Ω—å?")
        await state.set_state(UserProfile.activity)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è¬†–≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return


@router.message(UserProfile.activity)
async def update_activity(message: Message, state: FSMContext):
    try:
        activity = int(message.text)
        if activity < 0:
            await message.reply("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ¬†–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
            return
        await state.update_data(activity=activity)
        await message.reply("–í¬†–∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã¬†–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
        await state.set_state(UserProfile.city)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è¬†–≤–≤–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return


@router.message(UserProfile.city)
async def update_city(message: Message, state: FSMContext):
    city = message.text.strip()
    if not city or city.isspace() or not re.match(r"^[a-zA-Z–∞-—è–ê-–Ø0-9\s-]+$", city):
        await message.reply(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ¬†–¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏¬†–±—ã—Ç—å –ø—É—Å—Ç—ã–º."
            "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return

    await state.update_data(city=city)

    user_id = message.from_user.id
    user = users[user_id]

    user_data = await state.get_data()
    user.data.weight = user_data["weight"]
    user.data.height = user_data["height"]
    user.data.age = user_data["age"]
    user.data.activity = user_data["activity"]
    user.data.city = user_data["city"]
    save_users()

    temperature = get_city_temperature(translate_to_english(user.data.city))
    if temperature is None:
        await message.reply(
            "–î–∞–Ω–Ω—ã–µ –æ¬†—Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –≤¬†–≥–æ—Ä–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
            "\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ¬†—É–º–æ–ª—á–∞–Ω–∏—é: 10¬∞C."
        )
        temperature = 10.0

    user.daily.water_goal = get_water_norm(user.data.weight, user.data.activity, temperature)
    user.daily.calorie_goal = get_calories_norm(user.data.weight, user.data.height, user.data.age, user.data.activity)
    save_users()

    await state.clear()
    await message.reply(
        f"–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω¬†üôå\n"
        f"\n–í–µ—Å: {user.data.weight}¬†–∫–≥"
        f"\n–†–æ—Å—Ç: {user.data.height}¬†—Å–º"
        f"\n–í–æ–∑—Ä–∞—Å—Ç: {user.data.age}¬†–ª–µ—Ç"
        f"\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.data.activity}¬†–º–∏–Ω—É—Ç"
        f"\n–ì–æ—Ä–æ–¥: {user.data.city}\n"
        f"\n–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {int(user.daily.water_goal)}¬†–º–ª"
        f"\n–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {int(user.daily.calorie_goal)}¬†–∫–∫–∞–ª"
    )


@router.message(Command("log_water"))
async def log_water(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ¬†–Ω–∞–π–¥–µ–Ω¬†üßê"
                            "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile, —á—Ç–æ–±—ã¬†—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    try:
        command_structure = message.text.split()
        if len(command_structure) != 2:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã."
                                "\n–ù–∞–ø—Ä–∏–º–µ—Ä: /log_water 300")
            return
        try:
            logged_water = int(command_structure[1])
            if logged_water <= 0:
                await message.reply("–û–±—ä–µ–º –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ¬†0.")
                return
            user = users[user_id]
            user.daily.logged_water += logged_water
            save_users()

            left_to_drink = max(user.daily.water_goal - user.daily.logged_water, 0)

            if left_to_drink == 0:
                water_status = "\n–£—Ä–∞! –ù–æ—Ä–º–∞ –≤–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬†üéâ"
            else:
                water_status = f"\nüíß¬†–î–æ¬†–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã: {int(left_to_drink)}¬†–º–ª."
            await message.reply(
                f"‚úÖ¬†–î–æ–±–∞–≤–ª–µ–Ω–æ: {int(logged_water)}¬†–º–ª –≤–æ–¥—ã."
                f"\nü•§¬†–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {int(user.daily.logged_water)}¬†–º–ª."
                f"{water_status}"
            )

        except ValueError:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è¬†–≤–≤–æ–¥–∞ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
            return
    except ValueError as e:
        await message.reply(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫¬†üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.message(Command("log_food"))
async def log_food(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ¬†–Ω–∞–π–¥–µ–Ω¬†üßê"
                            "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile, —á—Ç–æ–±—ã¬†—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    try:
        command_structure = message.text.split()

        if len(command_structure) < 2:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã."
                                "\n–ù–∞–ø—Ä–∏–º–µ—Ä: /log_food –±–∞–Ω–∞–Ω")
            return
        if len(command_structure) > 2:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ¬†–æ–¥–Ω–æ–º—É."
                                "\n–ù–∞–ø—Ä–∏–º–µ—Ä: /log_food —Å—É–ø")
            return

        product = command_structure[1]
        if not re.match(r"^[a-zA-Z–∞-—è–ê-–Ø—ë–Å]+$", product):
            await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        product_data = get_product_nutrition(translate_to_english(product))
        if not product_data:
            await message.reply(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ¬†–ø—Ä–æ–¥—É–∫—Ç–µ '{product}'¬†(en:¬†{translate_to_english(product)}) –Ω–µ¬†–Ω–∞–π–¥–µ–Ω–∞."
                                "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–Ω—Ç –Ω–∞–∑–≤–∞–Ω–∏—è.")
            return
        try:
            calories_100g = round(product_data['foods'][0]['nf_calories'] \
                                  / product_data['foods'][0]['serving_weight_grams'] * 100, 2)
            await message.reply(
                f"{product.capitalize()} ‚Äî {calories_100g}¬†–∫–∫–∞–ª –Ω–∞¬†100¬†–≥."
                f"\n–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
            )
            await state.set_state(UserFood.logged_amount_g)
            await state.update_data(product_name=product, calories_100g=calories_100g)
        except (KeyError, IndexError, ValueError):
            await message.reply(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫¬†üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    except ValueError as e:
        await message.reply(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫¬†üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.message(UserFood.logged_amount_g)
async def log_food_amount(message: Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        food_amount_g = int(message.text)
        if food_amount_g <= 0:
            await message.reply("–í–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ¬†0 (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
            return

        user = users[user_id]
        data = await state.get_data()
        calories_100g = data["calories_100g"]
        product_name = data["product_name"]
        logged_calories = round((calories_100g / 100) * food_amount_g, 2)
        user.daily.logged_calories += logged_calories
        save_users()

        calories_left = round(user.daily.calorie_goal - user.daily.logged_calories)
        activity_minutes = user.data.activity
        burned_calories = user.daily.burned_calories
        activity_calories = (activity_minutes // 30) * 200
        extra_burned = burned_calories - activity_calories

        # –ù–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –¥–æ–ø. —Ñ–∏–∑. –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –≤–æ–¥—ã (–Ω–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ –µ—Å—Ç—å –±–æ–ª—å—à–µ)
        # –ù–æ –µ—Å–ª–∏ —Å–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∫–∞–ª –Ω–∞ —ç–∫—Å—Ç—Ä–∞-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ —Å—ä–µ–¥–µ–Ω–Ω—ã–º –∫–∫–∞–ª ‚Äî –Ω–µ –≤—ã–≤–æ–¥–∏–º –∞–ª–µ—Ä—Ç
        if calories_left >= -10 and calories_left <= 10:
            calories_status = "\n–£—Ä–∞! –ù–æ—Ä–º–∞ –ø–æ¬†–∫–∞–ª–æ—Ä–∏—è–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬†üéâ"
        elif calories_left > 10:
            calories_status = f"\nüçé¬†–î–æ¬†–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã: {int(calories_left)}¬†–∫–∫–∞–ª."
        elif calories_left < -10 and extra_burned > abs(calories_left):
            calories_status = "\n–£—Ä–∞! –ù–æ—Ä–º–∞ –ø–æ¬†–∫–∞–ª–æ—Ä–∏—è–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬†üéâ"
        else:
            calories_status = f"\n‚ùó¬†–ù–æ—Ä–º–∞ –ø–æ¬†–∫–∞–ª–æ—Ä–∏—è–º –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –Ω–∞¬†{int(calories_left * -1)}¬†–∫–∫–∞–ª."
        await message.reply(
            f"‚úÖ¬†–î–æ–±–∞–≤–ª–µ–Ω–æ: {int(logged_calories)} –∫–∫–∞–ª –¥–ª—è¬†–ø—Ä–æ–¥—É–∫—Ç–∞ '{product_name}' ({int(food_amount_g)}¬†–≥—Ä)."
            f"\nüçΩÔ∏è¬†–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ¬†–∫–∞–ª–æ—Ä–∏—è–º: {int(user.daily.logged_calories)}¬†–∫–∫–∞–ª."
            f"{calories_status}"
        )
        await state.clear()

    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")


@router.message(Command("log_workout"))
async def log_workout(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ¬†–Ω–∞–π–¥–µ–Ω¬†üßê"
                            "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile, —á—Ç–æ–±—ã¬†—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    try:
        command_structure = message.text.split()
        if len(command_structure) < 3 :
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∏¬†–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã (–≤¬†–º–∏–Ω—É—Ç–∞—Ö –∏–ª–∏¬†—á–∞—Å–∞—Ö)."
                                "\n–ù–∞–ø—Ä–∏–º–µ—Ä: /log_workout –π–æ–≥–∞ 30 –º–∏–Ω—É—Ç")
            return

        if len(command_structure) > 4 :
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ¬†–æ–¥–Ω–æ–π."
                                "\n–ù–∞–ø—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 1 —á–∞—Å")
            return

        try:
            duration = float(command_structure[2])
            if duration <= 0:
                await message.reply("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ¬†0.")
                return
        except ValueError:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è¬†–≤–≤–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
            return

        try:
            duration_unit = command_structure[3].lower()
            if not re.match(r"^(–º–∏–Ω|—á–∞—Å)[–∞-—è–ê-–Ø]*$", duration_unit):
                await message.reply(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤¬†—á–∞—Å–∞—Ö –∏–ª–∏¬†–º–∏–Ω—É—Ç–∞—Ö."
                    "\n–ù–∞–ø—Ä–∏–º–µ—Ä: 30¬†–º–∏–Ω—É—Ç –∏–ª–∏¬†1.5¬†—á–∞—Å–∞."
                )
                return
        except IndexError:
            await message.reply("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ¬†—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –µ—â–µ¬†—Ä–∞–∑.")
            return

        split_for_exercise = message.text.split(maxsplit=1)
        exercise = split_for_exercise[1]

        exercise_data = get_exercise_data(translate_to_english(exercise))
        if not exercise_data:
            await message.reply(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ¬†—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ '{exercise}' –Ω–µ¬†–Ω–∞–π–¥–µ–Ω–∞."
                                "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–Ω—Ç –Ω–∞–∑–≤–∞–Ω–∏—è.")
            return

        try:
            burned_calories = round(exercise_data['exercises'][0]['nf_calories'], 2)
            exercise_duration_min = exercise_data['exercises'][0]['duration_min']

            user = users[user_id]
            user.daily.burned_calories += burned_calories
            user.daily.workout_minutes += exercise_duration_min

            # –ï—Å–ª–∏ –æ–±—ä–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤—Ö–æ–¥–∏—Ç –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —é–∑–µ—Ä–æ–º ‚Äî –Ω–µ –º–µ–Ω—è–µ–º –Ω–æ—Ä–º—É –≤–æ–¥—ã
            if user.daily.workout_minutes <= user.data.activity:
                exercise_water = (exercise_duration_min // 30) * 200
                water_status = f"\nüíß¬†–ù–µ¬†–∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–∏—Ç—å {int(exercise_water)}¬†–º–ª –≤–æ–¥—ã."
            else:
                exercise_water = (exercise_duration_min // 30) * 200
                add_water = ((user.daily.workout_minutes - user.data.activity) // 30) * 200
                user.daily.water_goal += add_water
                water_status = f"\n‚ùó¬†–ù–æ—Ä–º–∞ –≤–æ–¥—ã –∏–∑–º–µ–Ω–∏–ª–∞—Å—å! –ù–æ–≤–∞—è —Ü–µ–ª—å: {int(user.daily.water_goal)}¬†–º–ª.\
                \nüíß¬†–ù–µ¬†–∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–∏—Ç—å {int(exercise_water)}¬†–º–ª –≤–æ–¥—ã."

            save_users()

            await message.reply(
                f"üí™¬†{exercise.capitalize()} ‚Äî {int(burned_calories)}¬†–∫–∫–∞–ª."
                f"{water_status}"
                f"\nüî•¬†–í—Å–µ–≥–æ —Å–æ–∂–∂–µ–Ω–æ {int(user.daily.burned_calories)}¬†–∫–∫–∞–ª."
            )

        except (KeyError, IndexError, ValueError):
            await message.reply(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫¬†üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    except Exception as e:
        await message.reply(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫¬†üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.message(Command("check_progress"))
async def check_progress(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω¬†üßê"
                            "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    user = users[user_id]
    water_goal = user.daily.water_goal
    logged_water = user.daily.logged_water
    calorie_goal = user.daily.calorie_goal
    logged_calories = user.daily.logged_calories
    activity_minutes = user.data.activity
    burned_calories = user.daily.burned_calories

    water_left = max(water_goal - logged_water, 0)
    calories_left = round(calorie_goal - logged_calories)
    activity_calories = (activity_minutes // 30) * 200
    extra_burned = burned_calories - activity_calories

    if water_left == 0:
        water_status = "\nüíß¬†–ù–æ—Ä–º–∞ –ø–æ¬†–≤–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n"
    else:
        water_status = f"\nüíß¬†–î–æ¬†–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã: {int(water_left)}¬†–º–ª.\n"

    # –ù–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –¥–æ–ø. —Ñ–∏–∑. –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –≤–æ–¥—ã (–Ω–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ –µ—Å—Ç—å –±–æ–ª—å—à–µ)
    # –ù–æ –µ—Å–ª–∏ —Å–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∫–∞–ª –Ω–∞ —ç–∫—Å—Ç—Ä–∞-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ —Å—ä–µ–¥–µ–Ω–Ω—ã–º –∫–∫–∞–ª ‚Äî –Ω–µ –≤—ã–≤–æ–¥–∏–º –∞–ª–µ—Ä—Ç
    if calories_left >= -10 and calories_left <= 10:
        calories_status = "\nüçé¬†–ù–æ—Ä–º–∞ –ø–æ¬†–∫–∞–ª–æ—Ä–∏—è–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
    elif calories_left > 10:
        calories_status = f"\nüçé¬†–î–æ¬†–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã: {int(calories_left)}¬†–∫–∫–∞–ª."
    elif calories_left < -10 and extra_burned > abs(calories_left):
        calories_status = "\nüçé¬†–ù–æ—Ä–º–∞ –ø–æ¬†–∫–∞–ª–æ—Ä–∏—è–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
    else:
        calories_status = f"\nüçé¬†–ù–æ—Ä–º–∞ –ø–æ¬†–∫–∞–ª–æ—Ä–∏—è–º –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –Ω–∞¬†{abs(int(calories_left))}¬†–∫–∫–∞–ª, –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–æ–∏—Ç –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?"

    graph_image = get_progress_visualisation(user.daily.logged_water,
                                             user.daily.water_goal,
                                             user.daily.logged_calories,
                                             user.daily.calorie_goal)

    graph_image.seek(0)

    buffered_file = BufferedInputFile(
        graph_image.read(),
        filename="buffer_img.png"
    )

    await message.reply(
        "üìä¬†–ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"\n–í–æ–¥–∞:"
        f"\nü•§¬†–í—ã–ø–∏—Ç–æ: {int(logged_water)}¬†–º–ª –∏–∑¬†{int(water_goal)}¬†–º–ª."
        f"{water_status}"
        f"\n–ö–∞–ª–æ—Ä–∏–∏:"
        f"\nüçΩÔ∏è¬†–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {int(logged_calories)}¬†–∫–∫–∞–ª –∏–∑¬†{int(calorie_goal)}¬†–∫–∫–∞–ª."
        f"{calories_status}"
        f"\nüî•¬†–í—Å–µ–≥–æ —Å–æ–∂–∂–µ–Ω–æ {int(burned_calories)}¬†–∫–∫–∞–ª."
        f"\n‚öñÔ∏è¬†–ë–∞–ª–∞–Ω—Å: {int(logged_calories - burned_calories)}¬†–∫–∫–∞–ª."
    )

    await message.answer_photo(buffered_file)

dp.include_router(router)

async def main():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())